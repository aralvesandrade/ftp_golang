// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	ftp "github.com/jlaffaye/ftp"
	mock "github.com/stretchr/testify/mock"
)

// IFtpService is an autogenerated mock type for the IFtpService type
type IFtpService struct {
	mock.Mock
}

// ConnectFTP provides a mock function with given fields: host, port
func (_m *IFtpService) ConnectFTP(host string, port string) (*ftp.ServerConn, error) {
	ret := _m.Called(host, port)

	var r0 *ftp.ServerConn
	if rf, ok := ret.Get(0).(func(string, string) *ftp.ServerConn); ok {
		r0 = rf(host, port)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ftp.ServerConn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(host, port)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginFTP provides a mock function with given fields: client, user, pass
func (_m *IFtpService) LoginFTP(client ftp.ServerConn, user string, pass string) error {
	ret := _m.Called(client, user, pass)

	var r0 error
	if rf, ok := ret.Get(0).(func(ftp.ServerConn, string, string) error); ok {
		r0 = rf(client, user, pass)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadFileFTP provides a mock function with given fields: client, path, file
func (_m *IFtpService) ReadFileFTP(client ftp.ServerConn, path string, file string) ([]byte, error) {
	ret := _m.Called(client, path, file)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(ftp.ServerConn, string, string) []byte); ok {
		r0 = rf(client, path, file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ftp.ServerConn, string, string) error); ok {
		r1 = rf(client, path, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
